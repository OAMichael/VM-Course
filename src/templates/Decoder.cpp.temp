#include "Decoder.h"
#include <iostream>

namespace {

/* [[[cog
import cog
from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

cog.msg("Decoder.cpp: generate get and make part funcs")
data = load(open(isa_file, 'r'), Loader=Loader)

fields = data['fields'].items()

for name, field in fields:
    typeName = field['cpp_type_name']
    cog.outl(f"inline VM::{typeName} get_{name}(const VM::EncodedInstruction instr) {{")
    bits = field['location']['bits']
    cog.outl(f"\treturn static_cast<VM::{typeName}>(VM::getPartialBitsShifted<{bits['msb']}, {bits['lsb']}>(instr));")
    cog.outl("}")

for name, field in fields:
    typeName = field['cpp_type_name']
    cog.outl(f"inline uint32_t make_{name}(const uint32_t val) {{")
    bits = field['location']['bits']
    cog.outl(f"\treturn VM::makePartialBits<{bits['msb']}, {bits['lsb']}>(val);")
    cog.outl("}")

]]] */

// [[[end]]]

}

namespace VM {

void Decoder::decodeInstruction(const EncodedInstruction &encInstr, DecodedInstruction& decInstr) const {
    const InstructionType opcode = get_opcode(encInstr);

    switch(opcode) {
        /* [[[cog
        cog.msg("Decoder.cpp: generate decode instr")

        types = data['types']

        instr_refer_to_types = {}
        for instr in data['instructions'].values():
            instr_refer_to_types.setdefault(instr['type'], []).append(instr)

        for type, params in types.items():
            for instr in instr_refer_to_types[type]:
                cog.outl(f'case InstructionType::{instr["name"].upper()}:')
            cog.outl('{')
            for part in params:
                cog.outl(f'\tdecInstr.{part} = get_{part}(encInstr);')
            cog.outl('\tbreak;')
            cog.outl('}')
        
        cog.outl('default: {')
        cog.outl('\tdecInstr.opcode = InstructionType::INSTRUCTION_INVALID;')
        cog.outl('\tbreak;')
        cog.outl('}')
        ]]] */
        
        // [[[end]]]
    }
}


void Decoder::encodeInstruction(const DecodedInstruction& decInstr, EncodedInstruction& encInstr) const {

    switch(decInstr.opcode) {
        /* [[[cog
        cog.msg("Decoder.cpp: generate encode instr")

        for type, params in types.items():
            for instr in instr_refer_to_types[type]:
                cog.outl(f'case InstructionType::{instr["name"].upper()}:')
            cog.outl('{')
            param_size = len(params)
            for idx, part in enumerate(params):
                cog.outl('{}make_{}(decInstr.{}) {}'.format(
                    "\tencInstr = " if idx == 0 else "\t\t\t\t", 
                    part, 
                    part,
                    "|" if idx != param_size - 1 else ";"))
            cog.outl('\tbreak;')
            cog.outl('}')
        
        cog.outl('default: {')
        cog.outl('\tencInstr = make_opcode(InstructionType::INSTRUCTION_INVALID);')
        cog.outl('\tbreak;')
        cog.outl('}')
        ]]] */
        
        // [[[end]]]
    }
}


void Decoder::printInstruction(const DecodedInstruction& decInstr) const {
    std::string instrName = "unknown";
    auto it = instructionsOpcodeName.find(decInstr.opcode);
    if (it != instructionsOpcodeName.cend()) {
        instrName = it->second;
    }
    auto currWidth = std::cout.width();
    std::cout.width(14);

    switch(decInstr.opcode) {
        /* [[[cog
        cog.msg("Decoder.cpp: generate print instr")

        for type, params in types.items():
            for instr in instr_refer_to_types[type]:
                cog.outl(f'case InstructionType::{instr["name"].upper()}:')
            cog.outl('{')
            if type == 'onlyReg':
                cog.outl('\tstd::cout << std::left << instrName << "  r" << (int)decInstr.r1;')
            elif type == 'onlyImm':
                cog.outl('\tstd::cout << std::left << instrName << "  " << (int)decInstr.imm;')
            elif type == 'nothing':
                cog.outl('\tstd::cout << std::left << instrName;')
            elif type == 'twoRegs':
                cog.outl('\tstd::cout << std::left << instrName << "  r" << (int)decInstr.r1 << ", r" << (int)decInstr.r2;')
            elif type == 'regAndImm':
                cog.outl('\tstd::cout << std::left << instrName << "  r" << (int)decInstr.r1 << ", " << (int)decInstr.imm;')
            elif type == 'callType':
                cog.outl('\tstd::cout << std::left << instrName << "  " << (int)decInstr.imm << ", " << (int)decInstr.numArgs;')
            elif type == 'alloca':
                cog.outl('\tstd::string objType = decInstr.objType == VM::BasicObjectType::INTEGER ? "INTEGER" :')
                cog.outl('\t                      decInstr.objType == VM::BasicObjectType::FLOATING ? "FLOATING" :')
                cog.outl('\t                      decInstr.objType == VM::BasicObjectType::STRING ? "STRING" :')
                cog.outl('\t                      "unknown";')
                cog.outl('\tstd::cout << std::left << instrName << "  " << objType;')
            elif type == 'intrinsic':
                cog.outl('\tstd::string intrType = "unknown";')
                cog.outl('\tauto it = intrinsicsOpcodeName.find(decInstr.intrCode);')
                cog.outl('\tif (it != intrinsicsOpcodeName.cend()) {')
                cog.outl('\t\tintrType = it->second;')
                cog.outl('\t}')
                cog.outl('\tstd::cout << std::left << instrName << "  " << intrType;')

            cog.outl('\tbreak;')
            cog.outl('}')

        cog.outl('default: {')
        cog.outl('\tstd::cout << "Unknown instruction";')
        cog.outl('\tbreak;')
        cog.outl('}')
        ]]] */

        // [[[end]]]
    }

    std::cout.width(currWidth);
}

}   // VM
