#ifndef GENERATED_INTERPRETER_H
#define GENERATED_INTERPRETER_H

#include <iostream>
#include <cstring>
#include <exception>

#include <cmath>

#include "VirtualMachine.h"
#include "Interpreter.h"

namespace VM {

inline Immediate Interpreter::loadConstant(const ImmediateIndex idx) {
    Immediate* constantPool = (Immediate*)(m_vm->m_memory + VM_CONSTANT_POOL_MEMORY_ADDRESS);
    return constantPool[idx];
}

// Allocate in a tree-like style
uint64_t Interpreter::allocateObject(const uint16_t classIdx, const size_t size) {
    uint64_t addr = *arenaPointer;

    uint16_t* classMemory = (uint16_t*)(memory + VM_CLASS_DESCS_MEMORY_ADDRESS);
    uint16_t classPtr16 = classMemory[classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    ObjectHeader objHeader{};
    objHeader.classIdx = classIdx;
    objHeader.size = static_cast<uint16_t>(size);

    std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
    *arenaPointer += sizeof(ObjectHeader) + fieldCount * size * sizeof(uint64_t);

    for (size_t k = 0; k < size; ++k) {
        for (int i = 0; i < fieldCount; ++i) {
            uint16_t allocClassIdx = classMemory[classPtr16 + 1 + i];
            // Use inplace memory for integers, floats and string which are allocated inside an object
            if (allocClassIdx == BasicObjectType::INTEGER ||
                allocClassIdx == BasicObjectType::FLOATING ||
                allocClassIdx == BasicObjectType::STRING)
            {
                continue;
            }
            uint64_t allocAddr = allocateObject(allocClassIdx);
            uint64_t objAddr = addr + sizeof(ObjectHeader) + k * fieldCount;
            uint64_t fieldAddr = objAddr + i * sizeof(uint64_t);
            std::memcpy(memory + fieldAddr, &allocAddr, sizeof(uint64_t));
        }
    }

    return addr;
}

bool Interpreter::interpret(const uint64_t entry) {
    // Initialize root frame
    memory = m_vm->m_memory;
    arenaPointer = &(m_vm->m_arenaPointer);
    m_currFrame = new Frame();
    m_currFrame->pc = entry;
    m_currFrame->parent = nullptr;
    regfile = m_currFrame->regfile;

    EncodedInstruction* currInstr;
    DecodedInstruction decInstr;

    #define DISPATCH()                                                      \
    {                                                                       \
        currInstr = (EncodedInstruction*)(memory + m_currFrame->pc);        \
        m_currFrame->pc += INSTRUCTION_BYTESIZE;                            \
        m_decoder.decodeInstruction(*currInstr, decInstr);                  \
        goto *dispatchTable[decInstr.opcode];                               \
    }
    static void* dispatchTable[InstructionType::INSTRUCTION_COUNT] = {
        &&INSTRUCTION_INVALID,
        /* [[[cog
        import cog
        from yaml import load, dump
        try:
            from yaml import CLoader as Loader, CDumper as Dumper
        except ImportError:
            from yaml import Loader, Dumper

        cog.msg("Dispatch.h: generate interpreter")
        data = load(open(isa_file, 'r'), Loader=Loader)

        size_instr = len(data['instructions'].values())
        for idx, instr in enumerate(data['instructions'].values()):
            cog.outl(f"&&{instr['name'].upper()}__{',' if idx != size_instr - 1 else ''}")
        ]]] */

        // [[[end]]]
    };


    try {

        // Actual main interpretation
        DISPATCH()


        INSTRUCTION_INVALID:
            throw std::runtime_error("got invalid instruction");

        /* [[[cog
        for instr in data['instructions'].values():
            cog.outl(f"{instr['name'].upper()}__:")
            cog.outl("\texec_{}(decInstr);".format(instr['name']))
            cog.outl("\tDISPATCH();")
        ]]] */

        // [[[end]]]
    }
    catch (const std::runtime_error& error) {
        if (std::string(error.what()) == std::string("end of program")) // it's bad and temporate method of end of program
            return true;

        std::cerr << "Error occured during interpreting: " << error.what() << std::endl;
        return false;
    }
}

inline void Interpreter::exec_load_Acc (const DecodedInstruction &instr) {
    accumulator = regfile[instr.r1];
}
inline void Interpreter::exec_store_Acc (const DecodedInstruction &instr) {
    regfile[instr.r1] = accumulator;
}
inline void Interpreter::exec_load_AccI (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    if (imm.type == BasicObjectType::STRING) {
        imm.i_val += VM_STRING_POOL_MEMORY_ADDRESS;
    }
    memcpy(&accumulator, &imm.i_val, sizeof(accumulator));
}
inline void Interpreter::exec_to_Float_Reg (const DecodedInstruction &instr) {
    accumulator.f_val = static_cast<double>(regfile[instr.r1].i_val);
}
inline void Interpreter::exec_to_Int_Reg (const DecodedInstruction &instr) {
    accumulator.i_val = static_cast<uint64_t>(regfile[instr.r1].f_val);
}
inline void Interpreter::exec_to_Float ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = static_cast<double>(accumulator.i_val);
}
inline void Interpreter::exec_to_Int ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.i_val = static_cast<uint64_t>(accumulator.f_val);
}
inline void Interpreter::exec_mv (const DecodedInstruction &instr) {
    regfile[instr.r1].i_val = regfile[instr.r2].i_val;
}
inline void Interpreter::exec_mvi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    regfile[instr.r1].i_val = imm.i_val;
}
inline void Interpreter::exec_load_Acc_Mem (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    memcpy(&accumulator, memory + regfile[instr.r1].i_val + imm.i_val, sizeof(accumulator));
}
inline void Interpreter::exec_store_Acc_Mem (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    memcpy(memory + regfile[instr.r1].i_val + imm.i_val, &accumulator, sizeof(accumulator));
}
inline void Interpreter::exec_add (const DecodedInstruction &instr) {
    accumulator.i_val += regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sub (const DecodedInstruction &instr) {
    accumulator.i_val -= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_mul (const DecodedInstruction &instr) {
    accumulator.i_val *= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_div (const DecodedInstruction &instr) {
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }
    accumulator.i_val /= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_and (const DecodedInstruction &instr) {
    accumulator.i_val &= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_or (const DecodedInstruction &instr) {
    accumulator.i_val |= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_xor (const DecodedInstruction &instr) {
    accumulator.i_val ^= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sl (const DecodedInstruction &instr) {
    accumulator.i_val <<= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sr (const DecodedInstruction &instr) {
    accumulator.i_val >>= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_addi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val += imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val += imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_subi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val -= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val -= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_muli (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val *= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val *= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_divi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }

    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val /= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val /= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_andi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val &= imm.i_val;
}
inline void Interpreter::exec_ori (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val |= imm.i_val;
}
inline void Interpreter::exec_xori (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val ^= imm.i_val;
}
inline void Interpreter::exec_sli (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val <<= imm.i_val;
}
inline void Interpreter::exec_sri (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val >>= imm.i_val;
}
inline void Interpreter::exec_addf (const DecodedInstruction &instr) {
    accumulator.f_val += regfile[instr.r1].f_val;
}
inline void Interpreter::exec_subf (const DecodedInstruction &instr) {
    accumulator.f_val -= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_mulf (const DecodedInstruction &instr) {
    accumulator.f_val *= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_divf (const DecodedInstruction &instr) {
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }
    accumulator.f_val /= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_neg ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.i_val = -accumulator.i_val;
}
inline void Interpreter::exec_sin ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::sin(accumulator.f_val);
}
inline void Interpreter::exec_cos ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::cos(accumulator.f_val);
}
inline void Interpreter::exec_sqrt ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::sqrt(accumulator.f_val);
}
inline void Interpreter::exec_call_Intrinsic (const DecodedInstruction &instr) {
    switch(instr.intrCode) {
        case IntrinsicType::SCAN: {
            std::cin >> accumulator.i_val;
            if (std::cin.fail()) {
                throw std::runtime_error("invalid input");
            }
            break;
        }
        case IntrinsicType::PRINT: {
            std::cout << accumulator.i_val << std::endl;
            break;
        }
        case IntrinsicType::SCANF: {
            std::cin >> accumulator.f_val;
            if (std::cin.fail()) {
                throw std::runtime_error("invalid input");
            }
            break;
        }
        case IntrinsicType::PRINTF: {
            std::cout << accumulator.f_val << std::endl;
            break;
        }
        case IntrinsicType::SCANS: {
            uint32_t strSize = static_cast<uint32_t>(accumulator.i_val);

            std::string str;
            str.resize(strSize);
            std::cin >> str;

            accumulator.i_val = m_vm->m_stringPoolPointer;
            std::memcpy(memory + m_vm->m_stringPoolPointer, &strSize, sizeof(uint32_t));
            std::memcpy(memory + m_vm->m_stringPoolPointer + sizeof(uint32_t), str.data(), strSize);

            m_vm->m_stringPoolPointer += sizeof(uint32_t) + strSize;
            break;
        }
        case IntrinsicType::PRINTS: {
            uint32_t strSize = 0;
            std::memcpy(&strSize, memory + accumulator.i_val, sizeof(uint32_t));
            std::string str;
            str.resize(strSize);
            std::memcpy(str.data(), memory + accumulator.i_val + sizeof(uint32_t), strSize);

            std::cout << str.c_str();
            break;
        }
        case IntrinsicType::STRLEN: {
            // Length can be both < or == than size because string might have or have no '\0'
            std::string str;

            uint64_t addr = accumulator.i_val;
            if (addr >= VM_STRING_POOL_MEMORY_ADDRESS && addr < VM_STRING_POOL_MEMORY_ADDRESS + VM_STRING_POOL_MEMORY_BYTESIZE) {
                // String from string pool
                uint32_t strSize = 0;
                std::memcpy(&strSize, memory + addr, sizeof(uint32_t));
                str.resize(strSize);
                std::memcpy(str.data(), memory + addr + sizeof(uint32_t), strSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));
                str.resize(objHeader.size);
                std::memcpy(str.data(), memory + addr + sizeof(ObjectHeader), objHeader.size);
            }

            accumulator.i_val = str.length();
            break;
        }
        case IntrinsicType::STRCAT: {
            uint32_t strSize1 = 0;
            uint32_t strSize2 = 0;

            // Allocate new string
            accumulator.i_val = m_vm->m_stringPoolPointer;

            // Get pointers to two strings from x0 and x1
            uint64_t strAddress1 = regfile[0].i_val;
            uint64_t strAddress2 = regfile[1].i_val;

            // Read string 1
            std::memcpy(&strSize1, memory + strAddress1, sizeof(uint32_t));
            std::string str1;
            str1.resize(strSize1);
            std::memcpy(str1.data(), memory + strAddress1 + sizeof(uint32_t), strSize1);


            // Read string 2
            std::memcpy(&strSize2, memory + strAddress2, sizeof(uint32_t));
            std::string str2;
            str2.resize(strSize2);
            std::memcpy(str2.data(), memory + strAddress2 + sizeof(uint32_t), strSize2);

            std::string concat = str1 + str2;
            uint32_t catSize = static_cast<uint32_t>(concat.size());
            std::memcpy(memory + m_vm->m_stringPoolPointer, &catSize, sizeof(uint32_t));
            std::memcpy(memory + m_vm->m_stringPoolPointer + sizeof(uint32_t), concat.data(), catSize);

            m_vm->m_stringPoolPointer += sizeof(uint32_t) + catSize;
            break;
        }
        case IntrinsicType::SUBSTR: {
            // Get address of original string
            uint64_t origAddress = accumulator.i_val;

            // Get indices of substr from x0 and x1
            uint64_t idx0 = regfile[0].i_val;
            uint64_t idx1 = regfile[1].i_val;

            if (idx1 < idx0) {
                throw std::runtime_error("invalid string indices");
            }

            // Allocate new string
            accumulator.i_val = m_vm->m_stringPoolPointer;

            // Read original string
            uint32_t origSize = 0;
            std::memcpy(&origSize, memory + origAddress, sizeof(uint32_t));
            std::string orig;
            orig.resize(origSize);
            std::memcpy(orig.data(), memory + origAddress + sizeof(uint32_t), origSize);

            if (idx1 >= orig.size()) {
                throw std::runtime_error("invalid string indices");
            }

            // Actual substr
            std::string substr = orig.substr(idx0, idx1 - idx0 + 1);

            // Now serialize substr
            uint32_t substrSize = static_cast<uint32_t>(substr.size());
            std::memcpy(memory + m_vm->m_stringPoolPointer, &substrSize, sizeof(uint32_t));
            std::memcpy(memory + m_vm->m_stringPoolPointer + sizeof(uint32_t), substr.data(), substrSize);

            m_vm->m_stringPoolPointer += sizeof(uint32_t) + substrSize;
            break;
        }
        default:
            break;

    }
}
inline void Interpreter::exec_jmp (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
}
inline void Interpreter::exec_beq (const DecodedInstruction &instr) {
    if (accumulator.i_val == regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bne (const DecodedInstruction &instr) {
    if (accumulator.i_val != regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bge (const DecodedInstruction &instr) {
    if (accumulator.i_val >= regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bgt (const DecodedInstruction &instr) {
    if (accumulator.i_val > regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_ble (const DecodedInstruction &instr) {
    if (accumulator.i_val <= regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_blt (const DecodedInstruction &instr) {
    if (accumulator.i_val < regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_call (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);

    size_t numArgs = instr.numArgs;
    int64_t offset = imm.i_val;

    // Create new frame
    Frame* newFrame = m_currFrame;
    m_currFrame = new Frame();
    m_currFrame->parent = newFrame;
    m_currFrame->pc = newFrame->pc - INSTRUCTION_BYTESIZE + offset;
    regfile = m_currFrame->regfile;
    memcpy(m_currFrame->regfile, m_currFrame->parent->regfile, numArgs * sizeof(Register));
}
inline void Interpreter::exec_ret ([[maybe_unused]] const DecodedInstruction &instr) {
    if (m_currFrame->parent == nullptr) {
        delete m_currFrame;// handle end of programm
        throw std::runtime_error("end of program");
    }

    Frame* parent = m_currFrame->parent;
    delete m_currFrame;
    m_currFrame = parent;
    regfile = m_currFrame->regfile;
}
inline void Interpreter::exec_new (const DecodedInstruction &instr) {
    // This switch is only for backward compatibility with frontend
    if (instr.objType != VM::BasicObjectType::OBJECT_TYPE_INVALID) {
        accumulator.i_val = *arenaPointer;
        switch (instr.objType) {
            case BasicObjectType::INTEGER: {
                *arenaPointer += sizeof(uint64_t);
                return;
            }
            case BasicObjectType::FLOATING: {
                *arenaPointer += sizeof(double);
                return;
            }
            default: {
                throw std::runtime_error("unknown basic object type");
            }
        }
    }

    // Handle basic types separately
    if (instr.classIdx == VM::BasicObjectType::INTEGER) {
        accumulator.i_val = *arenaPointer;

        ObjectHeader objHeader{};
        objHeader.classIdx = VM::BasicObjectType::INTEGER;
        std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
        *arenaPointer += sizeof(ObjectHeader) + sizeof(uint64_t);
        return;
    }

    if (instr.classIdx == VM::BasicObjectType::FLOATING) {
        accumulator.i_val = *arenaPointer;

        ObjectHeader objHeader{};
        objHeader.classIdx = VM::BasicObjectType::FLOATING;
        std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
        *arenaPointer += sizeof(ObjectHeader) + sizeof(double);
        return;
    }

    if (instr.classIdx == VM::BasicObjectType::STRING) {
        ObjectHeader objHeader{};
        objHeader.classIdx = VM::BasicObjectType::STRING;
        objHeader.size = static_cast<uint16_t>(accumulator.i_val);
        accumulator.i_val = *arenaPointer;
        std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
        *arenaPointer += sizeof(ObjectHeader) + objHeader.size * sizeof(uint8_t);
        return;
    }

    accumulator.i_val = allocateObject(instr.classIdx);
}
inline void Interpreter::exec_newarray (const DecodedInstruction &instr) {
    auto size = accumulator.i_val;

    // This switch is only for backward compatibility with frontend
    if (instr.objType != VM::BasicObjectType::OBJECT_TYPE_INVALID) {
        accumulator.i_val = *arenaPointer;
        switch (instr.objType) {
            case BasicObjectType::INTEGER: {
                *arenaPointer += sizeof(uint64_t) * size;
                break;
            }
            case BasicObjectType::FLOATING: {
                *arenaPointer += sizeof(double) * size;
                break;
            }
            default: {
                throw std::runtime_error("unknown basic object type");
            }
        }
    }

    // Handle basic types separately
    if (instr.classIdx == VM::BasicObjectType::INTEGER) {
        accumulator.i_val = *arenaPointer;

        ObjectHeader objHeader{};
        objHeader.classIdx = VM::BasicObjectType::INTEGER;
        objHeader.size = static_cast<uint16_t>(size);
        std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
        *arenaPointer += sizeof(ObjectHeader) + size * sizeof(uint64_t);
        return;
    }

    if (instr.classIdx == VM::BasicObjectType::FLOATING) {
        accumulator.i_val = *arenaPointer;

        ObjectHeader objHeader{};
        objHeader.classIdx = VM::BasicObjectType::FLOATING;
        objHeader.size = static_cast<uint16_t>(size);
        std::memcpy(memory + *arenaPointer, &objHeader, sizeof(ObjectHeader));
        *arenaPointer += sizeof(ObjectHeader) + size * sizeof(double);
        return;
    }

    if (instr.classIdx == VM::BasicObjectType::STRING) {
        // TODO
        return;
    }

    accumulator.i_val = allocateObject(instr.classIdx, size);
}
inline void Interpreter::exec_negf ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = -accumulator.f_val;
}
inline void Interpreter::exec_bgef (const DecodedInstruction &instr) {
    if (accumulator.f_val >= regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bgtf (const DecodedInstruction &instr) {
    if (accumulator.f_val > regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_blef (const DecodedInstruction &instr) {
    if (accumulator.f_val <= regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bltf (const DecodedInstruction &instr) {
    if (accumulator.f_val < regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_load_field (const DecodedInstruction &instr) {
    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + accumulator.i_val, sizeof(ObjectHeader));

    uint16_t* classMemory = (uint16_t*)(memory + VM_CLASS_DESCS_MEMORY_ADDRESS);
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    if (instr.fieldIdx >= fieldCount) {
        throw std::runtime_error("invalid field index");
    }

    uint64_t fieldAddr = accumulator.i_val + sizeof(ObjectHeader) + instr.fieldIdx * sizeof(uint64_t);
    std::memcpy(memory + fieldAddr, &regfile[instr.r1].i_val, sizeof(uint64_t));
}
inline void Interpreter::exec_store_field (const DecodedInstruction &instr) {
    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + accumulator.i_val, sizeof(ObjectHeader));

    uint16_t* classMemory = (uint16_t*)(memory + VM_CLASS_DESCS_MEMORY_ADDRESS);
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    if (instr.fieldIdx >= fieldCount) {
        throw std::runtime_error("invalid field index");
    }

    uint64_t fieldAddr = accumulator.i_val + sizeof(ObjectHeader) + instr.fieldIdx * sizeof(uint64_t);
    std::memcpy(&regfile[instr.r1].i_val, memory + fieldAddr, sizeof(uint64_t));
}
inline void Interpreter::exec_load_arr_elem (const DecodedInstruction &instr) {
    uint64_t addr = accumulator.i_val;

    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));

    uint64_t index = regfile[instr.r2].i_val;
    uint64_t value = regfile[instr.r1].i_val;

    if (index >= objHeader.size) {
        throw std::runtime_error("invalid array access: idx = " + std::to_string(index) + "  size = " + std::to_string(objHeader.size));
    }

    // Direct copy of basic types
    if (objHeader.classIdx == BasicObjectType::INTEGER ||
        objHeader.classIdx == BasicObjectType::FLOATING ||
        objHeader.classIdx == BasicObjectType::STRING)
    {
        std::memcpy(memory + addr + sizeof(ObjectHeader) + index * sizeof(uint64_t), &value, sizeof(uint64_t));
        return;
    }

    // For complex types value is pointer to another object
    ObjectHeader objHeaderSrc{};
    std::memcpy(&objHeaderSrc, memory + value, sizeof(ObjectHeader));

    if (objHeader.classIdx != objHeaderSrc.classIdx) {
        throw std::runtime_error("invalid array type");
    }

    uint16_t* classMemory = (uint16_t*)(memory + VM_CLASS_DESCS_MEMORY_ADDRESS);
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    std::memcpy(memory + addr + sizeof(ObjectHeader), memory + value + sizeof(ObjectHeader), fieldCount * sizeof(uint64_t));
}
inline void Interpreter::exec_store_arr_elem (const DecodedInstruction &instr) {
    uint64_t addr = accumulator.i_val;

    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));

    uint64_t index = regfile[instr.r2].i_val;

    if (index >= objHeader.size) {
        throw std::runtime_error("invalid array access: idx = " + std::to_string(index) + "  size = " + std::to_string(objHeader.size));
    }

    // Direct copy of basic types
    if (objHeader.classIdx == BasicObjectType::INTEGER ||
        objHeader.classIdx == BasicObjectType::FLOATING ||
        objHeader.classIdx == BasicObjectType::STRING)
    {
        std::memcpy(&regfile[instr.r1].i_val, memory + addr + sizeof(ObjectHeader) + index * sizeof(uint64_t), sizeof(uint64_t));
        return;
    }

    // For complex types value is pointer to another object
    ObjectHeader objHeaderDst{};
    std::memcpy(&objHeaderDst, memory + regfile[instr.r1].i_val, sizeof(ObjectHeader));

    if (objHeader.classIdx != objHeaderDst.classIdx) {
        throw std::runtime_error("invalid array type");
    }

    uint16_t* classMemory = (uint16_t*)(memory + VM_CLASS_DESCS_MEMORY_ADDRESS);
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    std::memcpy(memory + regfile[instr.r1].i_val + sizeof(ObjectHeader), memory + addr + sizeof(ObjectHeader), fieldCount * sizeof(uint64_t));
}
}
#endif
