#ifndef GENERATED_INTERPRETER_H
#define GENERATED_INTERPRETER_H

#include <iostream>
#include <cstring>
#include <exception>

#include <cmath>

#include "VirtualMachine.h"
#include "Interpreter.h"

namespace VM {

Interpreter::Interpreter(VirtualMachine* p_vm) :
    m_vm{p_vm},
    allocator{&m_vm->m_allocator} {}

inline Immediate Interpreter::loadConstant(const ImmediateIndex idx) {
    Immediate* constantPool = allocator->getMemoryPtr<Immediate, MemoryType::ConstantPool>();
    return constantPool[idx];
}

bool Interpreter::interpret(const uint64_t entry) {
    memory = m_vm->m_memory;

    // Initialize root frame
    m_currFrame = new Frame();
    m_currFrame->pc = entry;
    m_currFrame->parent = nullptr;
    regfile = m_currFrame->regfile;

    EncodedInstruction* currInstr;
    DecodedInstruction decInstr;

    uint64_t executedInstrCount = 0;

    #define DISPATCH()                                                                                  \
    {                                                                                                   \
        ++executedInstrCount;                                                                           \
        if (executedInstrCount % GARBAGE_COLLECTOR_INSTRUCTION_STEP == 0) {                             \
            m_vm->invokeGC();                                                                           \
        }                                                                                               \
        currInstr = allocator->getMemoryPtr<EncodedInstruction, MemoryType::Program>(m_currFrame->pc);  \
        m_currFrame->pc += INSTRUCTION_BYTESIZE;                                                        \
        m_decoder.decodeInstruction(*currInstr, decInstr);                                              \
        goto *dispatchTable[decInstr.opcode];                                                           \
    }
    static void* dispatchTable[InstructionType::INSTRUCTION_COUNT] = {
        &&INSTRUCTION_INVALID,
        /* [[[cog
        import cog
        from yaml import load, dump
        try:
            from yaml import CLoader as Loader, CDumper as Dumper
        except ImportError:
            from yaml import Loader, Dumper

        cog.msg("Dispatch.h: generate interpreter")
        data = load(open(isa_file, 'r'), Loader=Loader)

        size_instr = len(data['instructions'].values())
        for idx, instr in enumerate(data['instructions'].values()):
            cog.outl(f"&&{instr['name'].upper()}__{',' if idx != size_instr - 1 else ''}")
        ]]] */

        // [[[end]]]
    };


    try {

        // Actual main interpretation
        DISPATCH()


        INSTRUCTION_INVALID:
            throw std::runtime_error("got invalid instruction");

        /* [[[cog
        for instr in data['instructions'].values():
            cog.outl(f"{instr['name'].upper()}__:")
            cog.outl("\texec_{}(decInstr);".format(instr['name']))
            cog.outl("\tDISPATCH();")
        ]]] */

        // [[[end]]]
    }
    catch (const std::runtime_error& error) {
        if (std::string(error.what()) == std::string("end of program")) // it's bad and temporate method of end of program
            return true;

        std::cerr << "Error occured during interpreting: " << error.what() << std::endl;
        return false;
    }
}

inline void Interpreter::exec_load_Acc (const DecodedInstruction &instr) {
    accumulator = regfile[instr.r1];
}
inline void Interpreter::exec_store_Acc (const DecodedInstruction &instr) {
    regfile[instr.r1] = accumulator;
}
inline void Interpreter::exec_load_AccI (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    if (imm.type == BasicObjectType::STRING) {
        imm.i_val += VM_STRING_POOL_MEMORY_ADDRESS;
    }
    accumulator.i_val = imm.i_val;
    accumulator.isRef = false;
}
inline void Interpreter::exec_to_Float_Reg (const DecodedInstruction &instr) {
    accumulator.f_val = static_cast<double>(regfile[instr.r1].i_val);
}
inline void Interpreter::exec_to_Int_Reg (const DecodedInstruction &instr) {
    accumulator.i_val = static_cast<uint64_t>(regfile[instr.r1].f_val);
}
inline void Interpreter::exec_to_Float ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = static_cast<double>(accumulator.i_val);
}
inline void Interpreter::exec_to_Int ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.i_val = static_cast<uint64_t>(accumulator.f_val);
}
inline void Interpreter::exec_mv (const DecodedInstruction &instr) {
    regfile[instr.r1] = regfile[instr.r2];
}
inline void Interpreter::exec_mvi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    regfile[instr.r1].i_val = imm.i_val;
    regfile[instr.r1].isRef = false;
}
inline void Interpreter::exec_load_Acc_Mem (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    memcpy(&accumulator, memory + regfile[instr.r1].i_val + imm.i_val, sizeof(accumulator));
}
inline void Interpreter::exec_store_Acc_Mem (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    memcpy(memory + regfile[instr.r1].i_val + imm.i_val, &accumulator, sizeof(accumulator));
}
inline void Interpreter::exec_add (const DecodedInstruction &instr) {
    accumulator.i_val += regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sub (const DecodedInstruction &instr) {
    accumulator.i_val -= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_mul (const DecodedInstruction &instr) {
    accumulator.i_val *= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_div (const DecodedInstruction &instr) {
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }
    accumulator.i_val /= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_and (const DecodedInstruction &instr) {
    accumulator.i_val &= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_or (const DecodedInstruction &instr) {
    accumulator.i_val |= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_xor (const DecodedInstruction &instr) {
    accumulator.i_val ^= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sl (const DecodedInstruction &instr) {
    accumulator.i_val <<= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_sr (const DecodedInstruction &instr) {
    accumulator.i_val >>= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_addi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val += imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val += imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_subi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val -= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val -= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_muli (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val *= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val *= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_divi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }

    switch (imm.type) {
        case BasicObjectType::INTEGER: {
            accumulator.i_val /= imm.i_val;
            break;
        }
        case BasicObjectType::FLOATING: {
            accumulator.f_val /= imm.f_val;
            break;
        }
        default:;
    }
}
inline void Interpreter::exec_andi (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val &= imm.i_val;
}
inline void Interpreter::exec_ori (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val |= imm.i_val;
}
inline void Interpreter::exec_xori (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val ^= imm.i_val;
}
inline void Interpreter::exec_sli (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val <<= imm.i_val;
}
inline void Interpreter::exec_sri (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    accumulator.i_val >>= imm.i_val;
}
inline void Interpreter::exec_addf (const DecodedInstruction &instr) {
    accumulator.f_val += regfile[instr.r1].f_val;
}
inline void Interpreter::exec_subf (const DecodedInstruction &instr) {
    accumulator.f_val -= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_mulf (const DecodedInstruction &instr) {
    accumulator.f_val *= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_divf (const DecodedInstruction &instr) {
    if (regfile[instr.r1].i_val == 0) {
        throw std::runtime_error("division by zero");
    }
    accumulator.f_val /= regfile[instr.r1].f_val;
}
inline void Interpreter::exec_neg ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.i_val = -accumulator.i_val;
}
inline void Interpreter::exec_sin ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::sin(accumulator.f_val);
}
inline void Interpreter::exec_cos ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::cos(accumulator.f_val);
}
inline void Interpreter::exec_sqrt ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = std::sqrt(accumulator.f_val);
}
inline void Interpreter::exec_mod (const DecodedInstruction &instr) {
    accumulator.i_val %= regfile[instr.r1].i_val;
}
inline void Interpreter::exec_call_Intrinsic (const DecodedInstruction &instr) {
    switch(instr.intrCode) {
        case IntrinsicType::SCAN: {
            std::cin >> accumulator.i_val;
            accumulator.isRef = false;
            if (std::cin.fail()) {
                throw std::runtime_error("invalid input");
            }
            break;
        }
        case IntrinsicType::PRINT: {
            std::cout << accumulator.i_val << std::endl;
            break;
        }
        case IntrinsicType::SCANF: {
            std::cin >> accumulator.f_val;
            accumulator.isRef = false;
            if (std::cin.fail()) {
                throw std::runtime_error("invalid input");
            }
            break;
        }
        case IntrinsicType::PRINTF: {
            std::cout << accumulator.f_val << std::endl;
            break;
        }
        case IntrinsicType::SCANS: {
            uint32_t strSize = static_cast<uint32_t>(accumulator.i_val);

            std::string str;
            str.resize(strSize);
            std::cin >> str;

            uint64_t addr = allocator->allocateObject(BasicObjectType::STRING, strSize);
            accumulator.i_val = addr;
            accumulator.isRef = true;

            uint8_t* strArenaAddr = allocator->getMemoryPtr<uint8_t, MemoryType::Program>(addr + sizeof(ObjectHeader));
            std::memcpy(strArenaAddr, str.data(), strSize);
            break;
        }
        case IntrinsicType::PRINTS: {
            std::string str;

            uint64_t addr = accumulator.i_val;
            if (allocator->isAddrInRegion<MemoryType::StringPool>(addr)) {
                // String from string pool
                uint32_t strSize = 0;
                std::memcpy(&strSize, memory + addr, sizeof(uint32_t));
                str.resize(strSize);
                std::memcpy(str.data(), memory + addr + sizeof(uint32_t), strSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));
                str.resize(objHeader.size);
                std::memcpy(str.data(), memory + addr + sizeof(ObjectHeader), objHeader.size);
            }

            std::cout << str.c_str();
            break;
        }
        case IntrinsicType::STRLEN: {
            // Length can be both < or == than size because string might have or have no '\0'
            std::string str;

            uint64_t addr = accumulator.i_val;
            if (allocator->isAddrInRegion<MemoryType::StringPool>(addr)) {
                // String from string pool
                uint32_t strSize = 0;
                std::memcpy(&strSize, memory + addr, sizeof(uint32_t));
                str.resize(strSize);
                std::memcpy(str.data(), memory + addr + sizeof(uint32_t), strSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));
                str.resize(objHeader.size);
                std::memcpy(str.data(), memory + addr + sizeof(ObjectHeader), objHeader.size);
            }

            accumulator.i_val = str.length();
            break;
        }
        case IntrinsicType::STRCAT: {
            // Get pointers to two strings from x0 and x1
            uint64_t strAddr1 = regfile[0].i_val;
            uint64_t strAddr2 = regfile[1].i_val;

            std::string str1;
            std::string str2;

            // Read string 1
            if (allocator->isAddrInRegion<MemoryType::StringPool>(strAddr1)) {
                // String from string pool
                uint32_t strSize = 0;
                std::memcpy(&strSize, memory + strAddr1, sizeof(uint32_t));
                str1.resize(strSize);
                std::memcpy(str1.data(), memory + strAddr1 + sizeof(uint32_t), strSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + strAddr1, sizeof(ObjectHeader));
                str1.resize(objHeader.size);
                std::memcpy(str1.data(), memory + strAddr1 + sizeof(ObjectHeader), objHeader.size);
            }

            // Read string 2
            if (allocator->isAddrInRegion<MemoryType::StringPool>(strAddr2)) {
                // String from string pool
                uint32_t strSize = 0;
                std::memcpy(&strSize, memory + strAddr2, sizeof(uint32_t));
                str2.resize(strSize);
                std::memcpy(str2.data(), memory + strAddr2 + sizeof(uint32_t), strSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + strAddr2, sizeof(ObjectHeader));
                str2.resize(objHeader.size);
                std::memcpy(str2.data(), memory + strAddr2 + sizeof(ObjectHeader), objHeader.size);
            }

            std::string concat = str1 + str2;

            // Now serialize substr
            uint64_t concatAddr = allocator->allocateObject(BasicObjectType::STRING, concat.size());
            accumulator.i_val = concatAddr;
            accumulator.isRef = true;

            uint8_t* concatArenaAddr = allocator->getMemoryPtr<uint8_t, MemoryType::Program>(concatAddr + sizeof(ObjectHeader));
            std::memcpy(concatArenaAddr, concat.data(), concat.size());
            break;
        }
        case IntrinsicType::SUBSTR: {
            // Get indices of substr from x0 and x1
            uint64_t idx0 = regfile[0].i_val;
            uint64_t idx1 = regfile[1].i_val;

            if (idx1 < idx0) {
                throw std::runtime_error("invalid string indices");
            }

            std::string orig;

            // Get address of original string
            uint64_t addr = accumulator.i_val;
            if (allocator->isAddrInRegion<MemoryType::StringPool>(addr)) {
                // String from string pool
                uint32_t origSize = 0;
                std::memcpy(&origSize, memory + addr, sizeof(uint32_t));
                orig.resize(origSize);
                std::memcpy(orig.data(), memory + addr + sizeof(uint32_t), origSize);
            }
            else {
                // Dynamicly allocated string
                ObjectHeader objHeader;
                std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));
                orig.resize(objHeader.size);
                std::memcpy(orig.data(), memory + addr + sizeof(ObjectHeader), objHeader.size);
            }

            if (idx1 >= orig.size()) {
                throw std::runtime_error("invalid string indices");
            }

            // Actual substr
            std::string substr = orig.substr(idx0, idx1 - idx0 + 1);

            // Now serialize substr
            uint64_t substrAddr = allocator->allocateObject(BasicObjectType::STRING, substr.size());
            accumulator.i_val = substrAddr;
            accumulator.isRef = true;

            uint8_t* substrArenaAddr = allocator->getMemoryPtr<uint8_t, MemoryType::Program>(substrAddr + sizeof(ObjectHeader));
            std::memcpy(substrArenaAddr, substr.data(), substr.size());
            break;
        }
        default:
            break;

    }
}
inline void Interpreter::exec_jmp (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);
    m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
}
inline void Interpreter::exec_beq (const DecodedInstruction &instr) {
    if (accumulator.i_val == regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bne (const DecodedInstruction &instr) {
    if (accumulator.i_val != regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bge (const DecodedInstruction &instr) {
    if (accumulator.i_val >= regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bgt (const DecodedInstruction &instr) {
    if (accumulator.i_val > regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_ble (const DecodedInstruction &instr) {
    if (accumulator.i_val <= regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_blt (const DecodedInstruction &instr) {
    if (accumulator.i_val < regfile[instr.r1].i_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_call (const DecodedInstruction &instr) {
    Immediate imm = loadConstant(instr.imm);

    size_t numArgs = instr.numArgs;
    int64_t offset = imm.i_val;

    // Create new frame
    Frame* newFrame = m_currFrame;
    m_currFrame = new Frame();
    m_currFrame->parent = newFrame;
    m_currFrame->pc = newFrame->pc - INSTRUCTION_BYTESIZE + offset;
    regfile = m_currFrame->regfile;
    memcpy(m_currFrame->regfile, m_currFrame->parent->regfile, numArgs * sizeof(Register));
}
inline void Interpreter::exec_ret ([[maybe_unused]] const DecodedInstruction &instr) {
    if (m_currFrame->parent == nullptr) {
        delete m_currFrame;// handle end of programm
        throw std::runtime_error("end of program");
    }

    Frame* parent = m_currFrame->parent;
    delete m_currFrame;
    m_currFrame = parent;
    regfile = m_currFrame->regfile;
}
inline void Interpreter::exec_new (const DecodedInstruction &instr) {
    size_t size = 1;
    if (instr.classIdx == BasicObjectType::STRING) {
        size = accumulator.i_val;
    }
    accumulator.i_val = allocator->allocateObject(instr.classIdx, size);
    accumulator.isRef = true;
}
inline void Interpreter::exec_newarray (const DecodedInstruction &instr) {
    size_t size = accumulator.i_val;
    if (instr.classIdx == BasicObjectType::STRING) {
        // TODO: array of strings
        throw std::runtime_error("array of strings is not supported yet");
    }
    accumulator.i_val = allocator->allocateObject(instr.classIdx, size);
    accumulator.isRef = true;
}
inline void Interpreter::exec_negf ([[maybe_unused]] const DecodedInstruction &instr) {
    accumulator.f_val = -accumulator.f_val;
}
inline void Interpreter::exec_bgef (const DecodedInstruction &instr) {
    if (accumulator.f_val >= regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bgtf (const DecodedInstruction &instr) {
    if (accumulator.f_val > regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_blef (const DecodedInstruction &instr) {
    if (accumulator.f_val <= regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_bltf (const DecodedInstruction &instr) {
    if (accumulator.f_val < regfile[instr.r1].f_val) {
        Immediate imm = loadConstant(instr.imm);
        m_currFrame->pc += imm.i_val - INSTRUCTION_BYTESIZE;
    }
}
inline void Interpreter::exec_load_field (const DecodedInstruction &instr) {
    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + accumulator.i_val, sizeof(ObjectHeader));

    uint16_t* classMemory = allocator->getMemoryPtr<uint16_t, MemoryType::ClassDescs>();
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    if (instr.fieldIdx >= fieldCount) {
        throw std::runtime_error("invalid field index");
    }

    uint64_t fieldAddr = accumulator.i_val + sizeof(ObjectHeader) + instr.fieldIdx * sizeof(uint64_t);
    std::memcpy(memory + fieldAddr, &regfile[instr.r1].i_val, sizeof(uint64_t));
}
inline void Interpreter::exec_store_field (const DecodedInstruction &instr) {
    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + accumulator.i_val, sizeof(ObjectHeader));

    uint16_t* classMemory = allocator->getMemoryPtr<uint16_t, MemoryType::ClassDescs>();
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    if (instr.fieldIdx >= fieldCount) {
        throw std::runtime_error("invalid field index");
    }

    uint64_t fieldAddr = accumulator.i_val + sizeof(ObjectHeader) + instr.fieldIdx * sizeof(uint64_t);
    std::memcpy(&regfile[instr.r1].i_val, memory + fieldAddr, sizeof(uint64_t));

    // In this case field is reference
    if (classMemory[classPtr16 + 1 + instr.fieldIdx] >= BasicObjectType::OBJECT_TYPE_COUNT) {
        regfile[instr.r1].isRef = true;
    }
}
inline void Interpreter::exec_load_arr_elem (const DecodedInstruction &instr) {
    uint64_t addr = accumulator.i_val;

    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));

    uint64_t index = regfile[instr.r2].i_val;
    uint64_t value = regfile[instr.r1].i_val;

    if (index >= objHeader.size) {
        throw std::runtime_error("invalid array access: idx = " + std::to_string(index) + "  size = " + std::to_string(objHeader.size));
    }

    // Direct copy of basic types
    if (objHeader.classIdx == BasicObjectType::INTEGER ||
        objHeader.classIdx == BasicObjectType::FLOATING ||
        objHeader.classIdx == BasicObjectType::STRING)
    {
        std::memcpy(memory + addr + sizeof(ObjectHeader) + index * sizeof(uint64_t), &value, sizeof(uint64_t));
        return;
    }

    // For complex types value is pointer to another object
    ObjectHeader objHeaderSrc{};
    std::memcpy(&objHeaderSrc, memory + value, sizeof(ObjectHeader));

    if (objHeader.classIdx != objHeaderSrc.classIdx) {
        throw std::runtime_error("invalid array type");
    }

    uint16_t* classMemory = allocator->getMemoryPtr<uint16_t, MemoryType::ClassDescs>();
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    std::memcpy(memory + addr + sizeof(ObjectHeader), memory + value + sizeof(ObjectHeader), fieldCount * sizeof(uint64_t));
}
inline void Interpreter::exec_store_arr_elem (const DecodedInstruction &instr) {
    uint64_t addr = accumulator.i_val;

    ObjectHeader objHeader{};
    std::memcpy(&objHeader, memory + addr, sizeof(ObjectHeader));

    uint64_t index = regfile[instr.r2].i_val;

    if (index >= objHeader.size) {
        throw std::runtime_error("invalid array access: idx = " + std::to_string(index) + "  size = " + std::to_string(objHeader.size));
    }

    // Direct copy of basic types
    if (objHeader.classIdx == BasicObjectType::INTEGER ||
        objHeader.classIdx == BasicObjectType::FLOATING ||
        objHeader.classIdx == BasicObjectType::STRING)
    {
        std::memcpy(&regfile[instr.r1].i_val, memory + addr + sizeof(ObjectHeader) + index * sizeof(uint64_t), sizeof(uint64_t));
        regfile[instr.r1].isRef = false;
        return;
    }

    // For complex types value is pointer to another object
    ObjectHeader objHeaderDst{};
    std::memcpy(&objHeaderDst, memory + regfile[instr.r1].i_val, sizeof(ObjectHeader));

    if (objHeader.classIdx != objHeaderDst.classIdx) {
        throw std::runtime_error("invalid array type");
    }

    uint16_t* classMemory = allocator->getMemoryPtr<uint16_t, MemoryType::ClassDescs>();
    uint16_t classPtr16 = classMemory[objHeader.classIdx];
    uint16_t fieldCount = classMemory[classPtr16];

    std::memcpy(memory + regfile[instr.r1].i_val + sizeof(ObjectHeader), memory + addr + sizeof(ObjectHeader), fieldCount * sizeof(uint64_t));
}
}
#endif
