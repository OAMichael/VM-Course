#ifndef DECODER_H
#define DECODER_H

// Decoder.cpp autogenerated with template in codegen/templates/Decoder.cpp.temp

#include "Instructions.h"


namespace VM {

template<int high, int low>
static inline uint32_t getPartialBits(const EncodedInstruction val) {
    constexpr const uint32_t mask = ((1ULL << (high - low + 1)) - 1) << low;
    return (val & mask);
}

template<int high, int low>
static inline uint32_t getPartialBitsShifted(const EncodedInstruction val) {
    constexpr const uint32_t mask = ((1ULL << (high - low + 1)) - 1) << low;
    return (val & mask) >> low;
}

template<int high, int low>
static inline uint32_t makePartialBits(const uint32_t val) {
    constexpr const uint32_t mask = ((1ULL << (high - low + 1)) - 1) << low;
    return ((val << low) & mask);
}


class Decoder {

private:


public:
    void decodeInstruction(const EncodedInstruction &encInstr, DecodedInstruction &decInstr) const;
    void encodeInstruction(const DecodedInstruction &decInstr, EncodedInstruction &encInstr) const;
    void printInstruction(const DecodedInstruction &decInstr) const;
};

}   // VM

#endif  // DECODER_H
